{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://black-a-hw2/./src/main.ts","webpack://black-a-hw2/./src/audio.ts","webpack://black-a-hw2/./src/canvas.ts","webpack://black-a-hw2/./src/utils.ts","webpack://black-a-hw2/webpack/bootstrap"],"sourcesContent":["\"use strict\";\n/* Author: Andrew Black, with Tutorials from Professor Andrew Wheeland\n * Since: 2/26/24\n * File: Main.ts\n * Purpose: main.ts is primarily responsible for hooking up the UI to the rest of the application.\n * it also sets up the main event loop and does any initializations needed\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar audio = require(\"./audio\");\nvar canvas = require(\"./canvas\");\nvar utils = require(\"./utils\");\n// Params for drawing on canvas\nvar drawParams = {\n    showGradient: null,\n    showBars: null,\n    showCircles: null,\n    showTriangles: null,\n    showSquares: null,\n    showNoise: null,\n    showInvert: null,\n    showEmboss: null,\n    showLowshelf: null,\n    showHighshelf: null,\n    selectFrequency: null\n};\n// Arrays to keep track of trackNames and their data locations via a JSON file later\nvar trackNames;\nvar trackLocations;\n// Variable for the starting selection of the visualizer options (wavelength or frequency) loaded in via json\nvar startingVisualizerSelection;\n// Variable for the title of our application loaded in via json\nvar title;\n/* Init: does setup work for the rest of the program, notably instantiating setup for the canvas element, setting up the audio,\n * loading in the JSON file, and starting a loop for our canvas\n */\nvar init = function () {\n    console.log(\"init called\");\n    console.log(\"Testing utils.getRandomColor() import: \".concat(utils.getRandomColor()));\n    // Call our load json with a callback, firing the rest of the code (to ensure all the data in the json is loaded in before being used)\n    loadXmlXHR(function () {\n        // Load in audio\n        audio.setupWebaudio(trackLocations[0]);\n        // Hook up <canvas> element\n        var canvasElement = document.querySelector(\"canvas\");\n        setupUI(canvasElement);\n        canvas.setupCanvas(canvasElement, audio.analyserNode);\n        // Ensure initial state of dropdown is per assignment instructions, new adventure theme\n        document.querySelector(\"#track-select\").value = trackLocations[0];\n        // Set default visualizer\n        document.querySelector(\"#visualizer-select\").value = startingVisualizerSelection;\n        // Set title \n        document.querySelector(\"title\").textContent = title;\n        // Start loop\n        loop();\n    });\n};\n/* loadXMLXHR: loads in JSON file containing data relevant to application (tracks, title of application, default values for checkboxes)\n * Params: callback: function to be called back, in this case the rest of init\n*/\nvar loadXmlXHR = function (callback) {\n    var url = \"data/av-data.json\";\n    var xhr = new XMLHttpRequest();\n    // Call the XMLHttpRequest onload event to get started\n    xhr.onload = function (e) {\n        // Log for debugging\n        console.log(\"In onload - HTTP Status Code = \".concat(e.target.status));\n        // Load in json\n        var json = JSON.parse(xhr.responseText);\n        // Grab the json data for our arrays\n        trackLocations = json['Track Locations'];\n        trackNames = json['Tracks'];\n        // Get our truth table for our params, which holds the values for our checkboxes\n        var paramsTruthTable = json['Params Truth Table'];\n        paramsTruthTable.forEach(function (string) {\n            // Split the strings by ':' to separate parameter name and value\n            var _a = string.split(':'), paramName = _a[0], paramValue = _a[1];\n            // Trim whitespaces from parameter name and value\n            var trimmedParamName = paramName.trim();\n            var trimmedParamValue = paramValue.trim();\n            // Convert each trimmed param value (by name, which is accurate with the json) to its true/false value\n            drawParams[trimmedParamName] = (trimmedParamValue === 'true' || trimmedParamValue === 'false') ? (trimmedParamValue === 'true') : trimmedParamValue;\n        });\n        // Set other vars equal to JSON values\n        startingVisualizerSelection = json['Starting Visualizer State'];\n        title = json['Title'];\n        // Set the checked property of checkboxes based on drawParams values\n        document.querySelector(\"#cb-noise\").checked = drawParams.showNoise;\n        document.querySelector(\"#cb-bars\").checked = drawParams.showBars;\n        document.querySelector(\"#cb-circles\").checked = drawParams.showCircles;\n        document.querySelector(\"#cb-triangles\").checked = drawParams.showTriangles;\n        document.querySelector(\"#cb-squares\").checked = drawParams.showSquares;\n        document.querySelector(\"#cb-gradient\").checked = drawParams.showGradient;\n        document.querySelector(\"#cb-invert\").checked = drawParams.showInvert;\n        document.querySelector(\"#cb-emboss\").checked = drawParams.showEmboss;\n        document.querySelector(\"#cb-lowshelf\").checked = drawParams.showLowshelf;\n        document.querySelector(\"#cb-highshelf\").checked = drawParams.showHighshelf;\n        // Execute the callback function\n        callback();\n    };\n    // More debugging and necessary xml code\n    xhr.onerror = function (e) { return console.log(\"In onerror - HTTP Status Code = \".concat(e.target.status)); };\n    xhr.open(\"GET\", url);\n    xhr.send();\n};\n/* SetupUI: sets up the UI elements for our Canvas.\n * Params: canvasElement: the HTML canvas element\n * NOTE: any commenting with a letter (e.g., // A) is courtesy of Andrew Wheeland\n */\nvar setupUI = function (canvasElement) {\n    // A - hookup fullscreen button\n    var fsButton = document.querySelector(\"#fs-button\");\n    // Add .onclick event to  fullscreen button\n    fsButton.onclick = function (e) {\n        console.log(\"goFullscreen() called\");\n        // First use of an imported method, utils.goFullScreen makes the screen go... full\n        utils.goFullscreen(canvasElement);\n    };\n    // B - hookup for play button\n    var playButton = document.querySelector(\"#play-button\");\n    // Add .onclick event to play button\n    playButton.onclick = function (e) {\n        // Check if context is in suspended state (Autoplay policy)\n        if (audio.audioCtx.state == \"suspended\") {\n            audio.audioCtx.resume();\n        }\n        // Debug information\n        console.log(\"audioCtx.state after = \".concat(audio.audioCtx.state));\n        // If track is currently paused, play it\n        if (playButton.dataset.playing == \"no\") {\n            audio.playCurrentSound();\n            // CSS will set state to \"Pause\"\n            playButton.dataset.playing = \"yes\";\n            // Else if track IS playing, pause it!\n        }\n        else {\n            audio.pauseCurrentSound();\n            // CSS will set state to \"Play\"\n            playButton.dataset.playing = \"no\";\n        }\n    };\n    // C - hookup volume slider & label\n    var volumeSlider = document.querySelector(\"#volume-slider\");\n    var volumeLabel = document.querySelector(\"#volume-label\");\n    // Add .oninput event to slider\n    volumeSlider.oninput = function (e) {\n        // Set the gain\n        audio.setVolume(Number(e.target.value));\n        // Update value of label to match that of slider\n        volumeLabel.innerHTML = Math.round((Number(e.target.value) / 2 * 100)).toString();\n    };\n    // Set the value of label to match initial value of slider\n    volumeSlider.dispatchEvent(new Event(\"input\"));\n    // D - hookup track <select>\n    var trackSelect = document.querySelector(\"#track-select\");\n    // Add .onchange event to <select>\n    trackSelect.onchange = function (e) {\n        audio.loadSoundFile(e.target.value);\n        // Pause the current track if it is playing\n        if (playButton.dataset.playing == \"yes\") {\n            playButton.dispatchEvent(new MouseEvent(\"click\"));\n        }\n    };\n    // Hookup the visualizer selector, which in short changes the visuals based on how the data from audio is read\n    var visualizerSelect = document.querySelector(\"#visualizer-select\");\n    // Set the onclick to change the value of the selectFrequency\n    visualizerSelect.onchange = function (e) {\n        drawParams.selectFrequency = !drawParams.selectFrequency;\n    };\n    // E - setup checkboxes\n    // Set onclicks of our checkboxes to modify values of drawParams object\n    document.querySelector(\"#cb-bars\").onclick = function (e) {\n        drawParams.showBars = e.target.checked;\n    };\n    document.querySelector(\"#cb-circles\").onclick = function (e) {\n        drawParams.showCircles = e.target.checked;\n    };\n    document.querySelector(\"#cb-triangles\").onclick = function (e) {\n        drawParams.showTriangles = e.target.checked;\n    };\n    document.querySelector(\"#cb-squares\").onclick = function (e) {\n        drawParams.showSquares = e.target.checked;\n    };\n    document.querySelector(\"#cb-gradient\").onclick = function (e) {\n        drawParams.showGradient = e.target.checked;\n    };\n    document.querySelector(\"#cb-noise\").onclick = function (e) {\n        drawParams.showNoise = e.target.checked;\n    };\n    document.querySelector(\"#cb-emboss\").onclick = function (e) {\n        drawParams.showEmboss = e.target.checked;\n    };\n    document.querySelector(\"#cb-invert\").onclick = function (e) {\n        drawParams.showInvert = e.target.checked;\n    };\n    document.querySelector(\"#cb-lowshelf\").onclick = function (e) {\n        drawParams.showLowshelf = e.target.checked;\n        audio.toggleLowshelf(drawParams.showLowshelf);\n    };\n    document.querySelector(\"#cb-highshelf\").onclick = function (e) {\n        drawParams.showHighshelf = e.target.checked;\n        audio.toggleHighshelf(drawParams.showHighshelf);\n    };\n};\n/* Loop: this function calls a continuous loop that is responsible for our visualizer continuing to update\n * Note that the setTimeout function prevents the canvas from updating more than 60 FPS.\n * canvas.draw() is an external function that starts the drawing process, and takes in all those params\n * we grabbed from the JSON file\n */\nvar loop = function () {\n    setTimeout(loop);\n    canvas.draw(drawParams);\n};\ninit();\n","\"use strict\";\n/* Author: Professor Andrew Wheeland (note from student Andrew Black, I just followed his tutorial!)\n * Since: unknown, utilized by Andrew Black 2/26/24\n * File: Audio.js\n * Purpose: audio.js is all about using AudioContext to work with audio for our canvas and web page\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toggleLowshelf = exports.toggleHighshelf = exports.analyserNode = exports.setVolume = exports.loadSoundFile = exports.pauseCurrentSound = exports.playCurrentSound = exports.setupWebaudio = exports.audioCtx = void 0;\n// NOTE: any comments that start with a number (e.g., // 1) are courtesy of Andrew Wheeland (some others, too!)\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\nvar audioCtx;\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\nvar element, sourceNode, analyserNode, gainNode, biquadFilter, lowShelfBiquadFilter;\n// 3 - here we are faking an enumeration\nvar DEFAULTS = Object.freeze({\n    gain: .5,\n    numSamples: 256\n});\n// 4 - create a new array of 8-bit integers (0-255)\n// this is a typed array to hold the audio frequency data\nvar audioData = new Uint8Array(DEFAULTS.numSamples / 2);\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\n/* SetupWebAudio: does the necessary setups for our audio to work on our webpage\n * Params: filePath: the filePath of the audio we will use\n*/\nvar setupWebaudio = function (filePath) {\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\n    var AudioContext = window.AudioContext;\n    exports.audioCtx = audioCtx = new AudioContext();\n    // 2 - this creates an <audio> element\n    element = new Audio();\n    // 3 - have it point at a sound file\n    loadSoundFile(filePath);\n    // 4 - create an a source node that points at the <audio> element\n    sourceNode = audioCtx.createMediaElementSource(element);\n    // 5 - create an analyser node\n    // note the UK spelling of \"Analyser\"\n    exports.analyserNode = analyserNode = audioCtx.createAnalyser();\n    /*\n    // 6\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally\n    across the sound spectrum.\n    \n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz,\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing\n    the amplitude of that frequency.\n    */\n    // fft stands for Fast Fourier Transform\n    analyserNode.fftSize = DEFAULTS.numSamples;\n    // 7 - create a gain (volume) node\n    gainNode = audioCtx.createGain();\n    gainNode.gain.value = DEFAULTS.gain;\n    // 8 - create a biquadFilter (for bass and treble)\n    biquadFilter = audioCtx.createBiquadFilter();\n    biquadFilter.type = \"highshelf\";\n    lowShelfBiquadFilter = audioCtx.createBiquadFilter();\n    lowShelfBiquadFilter.type = \"lowshelf\";\n    // 1000 hertz\n    /* biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\n    biquadFilter.gain.setValueAtTime(20, audioCtx.currentTime); */\n    // 9 - connect the nodes - we now have an audio graph\n    sourceNode.connect(biquadFilter);\n    biquadFilter.connect(lowShelfBiquadFilter);\n    lowShelfBiquadFilter.connect(analyserNode);\n    analyserNode.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n};\nexports.setupWebaudio = setupWebaudio;\n/* LoadSoundFile: sets the source of our Audio element to the filepath\n * Params: filePath: filePath of audio file\n*/\nvar loadSoundFile = function (filePath) {\n    element.src = filePath;\n};\nexports.loadSoundFile = loadSoundFile;\n/* PlayCurrentSound: plays the audio element\n*/\nvar playCurrentSound = function () {\n    element.play();\n};\nexports.playCurrentSound = playCurrentSound;\n/* PauseCurrentSound: pauses the audio element\n*/\nvar pauseCurrentSound = function () {\n    element.pause();\n};\nexports.pauseCurrentSound = pauseCurrentSound;\n/* SetVolume: sets the volume output of the Audio based on the user's desired choice (Via slider in HTML)\n * Params: value: string that determines the output percentage\n */\nvar setVolume = function (value) {\n    // make sure that it's a Number rather than a String\n    value = Number(value);\n    gainNode.gain.value = value;\n};\nexports.setVolume = setVolume;\n/* ToggleHighShelf: method that changes the treble of the audio output\n * Params: highShelf: bool\n */\nvar toggleHighshelf = function (highshelf) {\n    if (highshelf) {\n        biquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\n        biquadFilter.gain.setValueAtTime(-25, audioCtx.currentTime);\n    }\n    else {\n        biquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\n    }\n};\nexports.toggleHighshelf = toggleHighshelf;\n/* ToggleLowShelf: method that changes the bass of the audio output\n * Params: lowShelf: bool\n */\nvar toggleLowshelf = function (lowshelf) {\n    if (lowshelf) {\n        lowShelfBiquadFilter.frequency.setValueAtTime(1000, audioCtx.currentTime);\n        lowShelfBiquadFilter.gain.setValueAtTime(15, audioCtx.currentTime);\n    }\n    else {\n        lowShelfBiquadFilter.gain.setValueAtTime(0, audioCtx.currentTime);\n    }\n};\nexports.toggleLowshelf = toggleLowshelf;\n","\"use strict\";\n/* Author: Andrew Black, with starter code from Professor Andrew Wheeland\n * Since: 2/26/24\n * File: canvas.js\n * Purpose: see below (written by Wheeland) NOTE: comments with a number or letter in front (e.g., // 3, // A) also by Wheeland\n/*\n    The purpose of this file is to take in the analyser node and a <canvas> element:\n      - the module will create a drawing context that points at the <canvas>\n      - it will store the reference to the analyser node\n      - in draw(), it will loop through the data in the analyser node\n      - and then draw something representative on the canvas\n      - maybe a better name for this file/module would be *visualizer.js* ?\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.draw = exports.setupCanvas = void 0;\nvar utils = require(\"./utils\");\n//data to be used later\nvar ctx, canvasWidth, canvasHeight, gradient, analyserNode, audioData;\n//class Triangle. used as a class per mandate of HW requirements. Triangle is used to make Triangles appear on visualizer\nvar Triangle = /** @class */ (function () {\n    function Triangle() {\n        this.length = 10;\n    }\n    /* SetStartPoint: function that determines the startpoint of the Triangle\n     * Params: canvasWidth, canvasHeight: the width and heigh of the canvas\n     */\n    Triangle.prototype.setStartPoint = function (canvasWidth, canvasHeight) {\n        this.x = canvasWidth * 1 / 5;\n        this.y = canvasHeight * 2 / 5;\n    };\n    /* Update: function called to update values of Triangle, which in turn changes how its drawn\n     * Params: byteData: the number associated with the byte of current audio point; fillStyle: fillStyle of triangle\n    */\n    Triangle.prototype.update = function (byteData, fillStyle) {\n        //numbers determined by trial error\n        byteData *= 5 / 10;\n        this.length = 10 + byteData;\n        //triangle would draw even if bytedata was 0. I couldn't figure out why, so this code solves that\n        if (byteData == 0)\n            this.length = 0;\n        //draw a new triangle\n        this.draw(fillStyle);\n    };\n    /* Draw: draws the triangle based on specs in its class\n     * Params: fillStyle: fillStyle of triangle\n    */\n    Triangle.prototype.draw = function (fillStyle) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.fillStyle = fillStyle;\n        ctx.moveTo(this.x, this.y + this.length);\n        ctx.lineTo(this.x - this.length, this.y);\n        ctx.lineTo(this.x + this.length, this.y);\n        ctx.fill();\n        ctx.restore();\n    };\n    return Triangle;\n}());\n//class Square. used as a class per mandate of HW requirements. Square is used to make Squares appear on visualizer\nvar Square = /** @class */ (function () {\n    function Square() {\n        this.length = 10;\n    }\n    /* SetStartPoint: function that determines the startpoint of the Square\n     * Params: canvasWidth, canvasHeight: the width and heigh of the canvas\n     */\n    Square.prototype.setStartPoint = function (canvasWidth, canvasHeight) {\n        this.x = canvasWidth * 4 / 5;\n        this.y = canvasHeight * 1 / 2;\n    };\n    /* Update: function called to update values of Square, which in turn changes how its drawn\n    * Params: byteData: the number associated with the byte of current audio point; fillStyle: fillStyle of triangle\n   */\n    Square.prototype.update = function (byteData, fillStyle) {\n        this.length = byteData;\n        //draw a new aquare\n        this.draw(fillStyle);\n    };\n    /* Draw: draws the square based on specs in its class\n     * Params: fillStyle: fillStyle of square\n    */\n    Square.prototype.draw = function (fillStyle) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.fillStyle = fillStyle;\n        ctx.rect(this.x - this.length / 2, this.y - this.length / 2, this.length, this.length);\n        ctx.fill();\n        ctx.restore();\n    };\n    return Square;\n}());\n//create new objects\nvar canvasTriangle = new Triangle();\nvar canvasSquare = new Square();\n/* SetupCanvas: sets up the canvas elements (such as width, height...)\n * Params: canvasElement: HTML context; analyserNodeRef: reference to the analyserNode from Audio object, which we will use in calculations to draw\n */\nvar setupCanvas = function (canvasElement, analyserNodeRef) {\n    // create drawing context\n    ctx = canvasElement.getContext(\"2d\");\n    canvasWidth = canvasElement.width;\n    canvasHeight = canvasElement.height;\n    // create a gradient that runs top to bottom\n    gradient = utils.getLinearGradient(ctx, 0, 0, 0, canvasHeight, [{ percent: .8, color: \"black\" }, { percent: 1, color: \"white\" }]);\n    // keep a reference to the analyser node\n    analyserNode = analyserNodeRef;\n    // this is the array where the analyser data will be stored\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\n    //send our canvas data to our classes\n    canvasTriangle.setStartPoint(canvasWidth, canvasHeight);\n    canvasSquare.setStartPoint(canvasWidth, canvasHeight);\n};\nexports.setupCanvas = setupCanvas;\n/* Draw: draws things to the canvas!\n * Params: params: objects holding truth values about what to draw\n*/\nvar draw = function (params) {\n    // 1 - populate the audioData array with the frequency data from the analyserNode\n    // notice these arrays are passed \"by reference\" \n    //check if the user has selected to visualize via frequency. if not, they MUST have chosen wavelength\n    //so get data via one of those two \n    if (params.selectFrequency) {\n        analyserNode.getByteFrequencyData(audioData);\n    }\n    else {\n        analyserNode.getByteTimeDomainData(audioData); // waveform data\n    }\n    // 2 - draw background\n    ctx.save();\n    ctx.fillStyle = \"black\";\n    ctx.globalAlpha = .1;\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n    ctx.restore();\n    // 3 - draw gradient\n    if (params.showGradient) {\n        ctx.save();\n        ctx.fillStyle = gradient;\n        ctx.globalAlpha = .3;\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n        ctx.restore();\n    }\n    //call our objects to update them with the byte data if necessary\n    if (params.showTriangles) {\n        for (var i = 0; i < audioData.length; i++) {\n            //fillStyle numbers chosen by trial and error. Settled on these to match the Circles somewhat\n            var fillStyle = \"rgba(\".concat(i / 10, \", \").concat(i / 5, \", \").concat(i, \", 1)\");\n            canvasTriangle.update(audioData[i], fillStyle);\n        }\n    }\n    if (params.showSquares) {\n        for (var i = 0; i < audioData.length; i++) {\n            //fillStyle numbers chosen by trial and error. Settled on these to match the Circles somewhat\n            var fillStyle = \"rgba(\".concat(i / 10, \", \").concat(i / 5, \", \").concat(i, \", 1)\");\n            canvasSquare.update(audioData[i], fillStyle);\n        }\n    }\n    // 4 - draw bars \n    // based on params\n    if (params.showLowshelf) {\n        // values for creating our rectangles, or \"bars\".\n        var barSpacing = 1;\n        var margin = 5;\n        var screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\n        var barWidth = screenWidthForBars / audioData.length;\n        var barHeight = 400;\n        var topSpacing = 100;\n        ctx.save();\n        ctx.fillStyle = 'rgba(227, 174, 50,0.50)';\n        ctx.strokeStyle = 'rgba(0,0,0,0.50)';\n        //loop through the data and draw!\n        for (var i = 0; i < audioData.length; i++) {\n            ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\n            ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\n        }\n        ctx.restore();\n    }\n    // draw in extra bars if our highshelf should be shown (treble)\n    if (params.showHighshelf) {\n        // values for creating our rectangles, or \"bars\".\n        var barSpacing = 6;\n        var margin = 3;\n        var screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\n        var barWidth = screenWidthForBars / audioData.length;\n        var barHeight = 400;\n        var topSpacing = -600;\n        ctx.save();\n        ctx.fillStyle = 'rgba(255,255,255,1)';\n        ctx.strokeStyle = 'rgba(255,255,255,0.50)';\n        //loop through the data and draw!\n        for (var i = 0; i < audioData.length; i++) {\n            ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\n            ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\n        }\n        ctx.restore();\n    }\n    // draw in extra bars if our lowshelf should be shown (bass)\n    if (params.showBars) {\n        // values for creating our rectangles, or \"bars\".\n        var barSpacing = 4;\n        var margin = 5;\n        var screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\n        var barWidth = screenWidthForBars / audioData.length;\n        var barHeight = 200;\n        var topSpacing = 100;\n        ctx.save();\n        ctx.fillStyle = 'rgba(255,255,255,0.50)';\n        ctx.strokeStyle = 'rgba(0,0,0,0.50)';\n        //loop through the data and draw!\n        for (var i = 0; i < audioData.length; i++) {\n            ctx.fillRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\n            ctx.strokeRect(margin + i * (barWidth + barSpacing), topSpacing + 256 - audioData[i], barWidth, barHeight);\n        }\n        ctx.restore();\n    }\n    // 5 - draw circles\n    // based on params\n    if (params.showCircles) {\n        //some variables for creation of circle. most of this was done via tutorial and the numbers were mostly not chosen by myself\n        //for some fun, they could be messed with, but I actually enjoyed the default values\n        var maxRadius = canvasHeight / 4;\n        ctx.save();\n        ctx.globalAlpha = .5;\n        for (var i = 0; i < audioData.length; i++) {\n            var percent = audioData[i] / 255;\n            var circleRadius = percent * maxRadius;\n            // redish circles\n            ctx.beginPath();\n            ctx.fillStyle = utils.makeColor(255, 111, 111, .34 - percent / 3.0);\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius, 0, 2 * Math.PI, false);\n            ctx.fill();\n            ctx.closePath();\n            // blueish circles, bigger, more transparent\n            ctx.beginPath();\n            ctx.fillStyle = utils.makeColor(0, 0, 255, .10 - percent / 10.0);\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * 1.5, 0, 2 * Math.PI, false);\n            ctx.fill();\n            ctx.closePath();\n            // yellow-ish circles, smaller\n            ctx.beginPath();\n            ctx.fillStyle = utils.makeColor(200, 200, 0, .5 - percent / 5.0);\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * .5, 0, 2 * Math.PI, false);\n            ctx.fill();\n            ctx.closePath();\n            //restore path\n            ctx.restore();\n        }\n        ctx.restore();\n    }\n    // 6 - bitmap manipulation\n    // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \n    // regardless of whether or not we are applying a pixel effect\n    // At some point, refactor this code so that we are looping though the image data only if\n    // it is necessary\n    // A) grab all of the pixels on the canvas and put them in the `data` array\n    // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\n    // the variable `data` below is a reference to that array \n    var imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\n    var data = imageData.data;\n    var length = data.length;\n    var width = imageData.width;\n    // emboss the screen if requested\n    if (params.showEmboss) {\n        //note we are stepping through *each* sub-pixel\n        for (var i = 0; i < length; i++) {\n            if (i % 4 == 3)\n                continue; //skip alpha channel\n            data[i] = 127 + 2 * data[i] - data[i + 4] - data[i + width * 4];\n        }\n    }\n    // B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\n    for (var i = 0; i < length; i += 4) {\n        // C) randomly change every 20th pixel to red\n        if (params.showNoise && Math.random() < .05) {\n            // data[i] is the red channel\n            // data[i+1] is the green channel\n            // data[i+2] is the blue channel\n            // data[i+3] is the alpha channel\n            // zero out the red and green and blue channels\n            // data[i] = data[i + 1] = data[i + 2] = 0;\n            // data[i] = 255;// make the red channel 100% red\n            // per assignment, changing the \"noise\" to be a different color than red\n            // currently shows yellow\n            // zero out the red and green and blue channels\n            data[i] = data[i + 1] = data[i + 2] = 0;\n            //create a yellow color for the noise\n            data[i] = 255;\n            data[i + 1] = 255;\n            data[i + 2] = 205;\n        } // end if\n        // invert the pixel colors if requested\n        if (params.showInvert) {\n            var red = data[i], green = data[i + 1], blue = data[i + 2];\n            data[i] = 255 - red; //set red\n            data[i + 1] = 255 - green; // set green\n            data[i + 2] = 255 - blue; //set blue\n            //data[i+3] is the alpha, but we're leaving that alone\n        }\n    } // end for\n    // D) copy image data back to canvas\n    ctx.putImageData(imageData, 0, 0);\n};\nexports.draw = draw;\n","\"use strict\";\n/* Author: Professor Andrew Wheeland (note from student Andrew Black, I just followed his tutorial!)\n * Since: unknown, utilized by Andrew Black 2/26/24\n * Purpose: utils.js is all about giving our other functions ways to utilize randomization and the ability to go fullscreen\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.goFullscreen = exports.getLinearGradient = exports.getRandomColor = exports.makeColor = void 0;\n/* MakeColor: returns a RGB value based on params\n * Params: red, green, blue, alpha: values for RGBA color creation (alpha defaults to 1 if not specified);\n * Returns: string used for the canvas that utlizes those values\n */\nvar makeColor = function (red, green, blue, alpha) {\n    if (alpha === void 0) { alpha = 1; }\n    return \"rgba(\".concat(red, \",\").concat(green, \",\").concat(blue, \",\").concat(alpha, \")\");\n};\nexports.makeColor = makeColor;\n/* GetRandom: returns a random number based on a min and max\n * Params: min, max: the minimum and maxmium values used in calculation\n * Returns: number\n */\nvar getRandom = function (min, max) {\n    return Math.random() * (max - min) + min;\n};\n/* GetRandomColor: returns a random RGBA value\n * Returns: string used for the canvas that utlizes those values\n */\nvar getRandomColor = function () {\n    // so that colors are not too bright or too dark \n    var floor = 35;\n    var getByte = function () { return getRandom(floor, 255 - floor); };\n    return \"rgba(\".concat(getByte(), \",\").concat(getByte(), \",\").concat(getByte(), \",1)\");\n};\nexports.getRandomColor = getRandomColor;\n/* GetLinearGradient: returns linear gradient for the canvas\n * Params: ctx: the canvas; startX, startY, endX, endY: the X/Y positions for beginning and end of gradient creation,\n * colorStops: the percentage of color we'd like at each stop (e.g., [{ percent: .8, color: \"black\" }, { percent: 1, color: \"white\" }])\n * Returns: liner gradient object\n */\nvar getLinearGradient = function (ctx, startX, startY, endX, endY, colorStops) {\n    var lg = ctx.createLinearGradient(startX, startY, endX, endY);\n    for (var _i = 0, colorStops_1 = colorStops; _i < colorStops_1.length; _i++) {\n        var stop_1 = colorStops_1[_i];\n        lg.addColorStop(stop_1.percent, stop_1.color);\n    }\n    return lg;\n};\nexports.getLinearGradient = getLinearGradient;\n/* GoFullScreen: allows the web page to utilize a fullscreen function\n * Better understanding at: https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\n*/\nvar goFullscreen = function (element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element.mozRequestFullscreen) {\n        element.mozRequestFullscreen();\n    }\n    else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\n        element.mozRequestFullScreen();\n    }\n    else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n    }\n    // .. and do nothing if the method is not supported\n};\nexports.goFullscreen = goFullscreen;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["trackLocations","startingVisualizerSelection","title","audio","canvas","utils","drawParams","loadXmlXHR","setupUI","loop","audioCtx","element","sourceNode","analyserNode","gainNode","biquadFilter","lowShelfBiquadFilter","Object","defineProperty","exports","value","toggleLowshelf","toggleHighshelf","setVolume","loadSoundFile","pauseCurrentSound","playCurrentSound","setupWebaudio","DEFAULTS","freeze","gain","numSamples","Uint8Array","filePath","AudioContext","window","Audio","createMediaElementSource","createAnalyser","fftSize","createGain","createBiquadFilter","type","connect","destination","src","play","pause","Number","highshelf","frequency","setValueAtTime","currentTime","lowshelf","draw","setupCanvas","ctx","canvasWidth","canvasHeight","gradient","audioData","Triangle","this","length","prototype","setStartPoint","x","y","update","byteData","fillStyle","save","beginPath","moveTo","lineTo","fill","restore","Square","rect","canvasTriangle","canvasSquare","canvasElement","analyserNodeRef","getContext","width","height","getLinearGradient","percent","color","params","selectFrequency","getByteFrequencyData","getByteTimeDomainData","globalAlpha","fillRect","showGradient","showTriangles","i","concat","showSquares","showLowshelf","barSpacing","margin","barWidth","barHeight","topSpacing","strokeStyle","strokeRect","showHighshelf","showBars","showCircles","maxRadius","circleRadius","makeColor","arc","Math","PI","closePath","imageData","getImageData","data","showEmboss","showNoise","random","showInvert","red","green","blue","putImageData","goFullscreen","getRandomColor","alpha","getByte","startX","startY","endX","endY","colorStops","lg","createLinearGradient","_i","colorStops_1","stop_1","addColorStop","requestFullscreen","mozRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","callback","xhr","XMLHttpRequest","onload","e","console","log","target","status","json","JSON","parse","responseText","forEach","string","_a","split","paramName","paramValue","trimmedParamName","trim","trimmedParamValue","document","querySelector","checked","onerror","open","send","onclick","playButton","state","resume","dataset","playing","volumeSlider","volumeLabel","oninput","innerHTML","round","toString","dispatchEvent","Event","onchange","MouseEvent","setTimeout","textContent"],"sourceRoot":""}